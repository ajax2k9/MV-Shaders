// xs_begin
// arg : { var = 'm_color' name = 'Color Index' value = '0' range = '0 256'    step = '1'    precision = '0' }
// arg : { var = 'm_scale_x' name = 'Scale X' value = '1' range = '1 256'    step = '1'    precision = '0' }
// arg : { var = 'm_scale_y' name = 'Scale Y' value = '1' range = '1 256'    step = '1'    precision = '0' }
// arg : { var = 'm_scale_z' name = 'Scale Z' value = '1' range = '1 256'    step = '1'    precision = '0' }
// author : 'Alex M'
// xs_end

//===== built-in args =====
// uniform vec3		i_volume_size;		// volume size [1-256]
// uniform float	i_color_index;		// current color index [0-255]
// uniform int		i_num_color_sels;	// number of color selections [1-255]

//===== built-in functions ===== 
// float voxel( vec3 v );				// get voxel color index
// float color_sel( float k );			// get kth selected color index
// vec4 palette( float index );			// get palette color

float random (vec2 st) {
    return fract(sin(dot(st.xy,
                         vec2(12.9898,78.233)))*
        43758.5453123);
}

// generate a new voxel color index [0, 255] at position v ( v is at the center of voxel, such as vec3( 1.5, 2.5, 4.5 ) )

float isTouching(vec3 v){
	
	if(v.x > 1 && voxel(vec3(v.x-1,v.y,v.z)) > 0) return voxel(vec3(v.x-1,v.y,v.z));
	if(v.x < i_volume_size.x && voxel(vec3(v.x+1,v.y,v.z)) > 0) return voxel(vec3(v.x+1,v.y,v.z));
	
	if(v.y > 1 && voxel(vec3(v.x,v.y-1,v.z)) > 0) return voxel(vec3(v.x,v.y-1,v.z));
	if(v.y < i_volume_size.y && voxel(vec3(v.x,v.y+1,v.z)) > 0) return voxel(vec3(v.x,v.y+1,v.z));
	
	if(v.z > 1 && voxel(vec3(v.x,v.y,v.z-1)) > 0) return voxel(vec3(v.x,v.y,v.z-1));
	if(v.z < i_volume_size.z && voxel(vec3(v.x,v.y,v.z+1)) > 0) return voxel(vec3(v.x,v.y,v.z+1));
	
	
	return 0;
}

float map( vec3 v ) {

    if(voxel(v) > 0) return voxel(v);
	
	vec3 s_v = vec3(floor(v.x / m_scale_x),floor(v.y / m_scale_y),floor(v.z / m_scale_z));
	
	
	float r1 = random(s_v.xy);
	float r2 = random(s_v.xz);
	float r3 = random(s_v.yz);
	
	float avg = (r1 + r2 + r3)/3.0;
	
	float touch = isTouching(v);
	if(avg > 0.5 &&  touch > 0){
		if(m_color < 1) return touch;
		return m_color;
	}
	
	return 0;
	
}
