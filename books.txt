// xs_begin
// arg : {id = '0' name = 'Cover 1' value = '1'   range = '1 255'    step = '1'    decimal = '0' }
// arg : {id = '1' name = 'Cover 2' value = '2'   range = '1 255'    step = '1'    decimal = '0' }
// arg : {id = '2' name = 'Page 1'  value = '3'    range = '1 255'    step = '1'    decimal = '0' }
// arg : {id = '3' name = 'Page 2'  value = '4'    range = '1 255'    step = '1'    decimal = '0' }
// arg : {id = '4' name = 'Spine'   value = '5'    range = '1 255'    step = '1'    decimal = '0' }
// author : 'Alex M'
// xs_end

//===== user args =====
// uniform float	i_args[8];

//===== built-in args =====
// uniform vec3		i_volume_size;	// volume size [1-256]
// uniform float	i_color_index;	// color index [0-255]
// uniform vec3		i_mirror;		// mirror mode [0,1]
// uniform vec3		i_axis;			// axis mode [0,1]
// uniform float	i_iter;			// iteration index

//===== built-in functions ===== 
// float voxel( vec3 v );			// get voxel color index at position v


float random (vec2 st) {
    return fract(sin(dot(st.xy,
                         vec2(12.9898,78.233)))*
        43758.5453123);
}

float pattern(vec2 st){
    vec2 f_v = floor(st);
     if(f_v.x > 4 && f_v.x <i_volume_size.x-4)return i_args[0];
     if(f_v.y > 3 && f_v.y <i_volume_size.y-4)return i_args[0];
     

     if(f_v.x > 2 && f_v.x <i_volume_size.x-2){
        if(f_v.y > 1 && f_v.y <i_volume_size.y-2){
            return i_args[0];
        }
    } 

    if(f_v.x > 1 && f_v.x <i_volume_size.x-1){
        if(f_v.y > 0 && f_v.y <i_volume_size.y-1){
            return i_args[1];
        }
    } 

    return i_args[0];
}

float map( vec3 v ) {				// generate a new voxel color index at position v ( v is at the center of voxel, such as vec3( 1.5, 2.5, 4.5 ) )
    float g = i_args[0];

    if(mod(floor(v.y + 2),5)  == 0.0){
        g = i_args[4];
    }
    
    if(floor(v.x)==0){
        if(floor(v.z)==0) return 0.0;
        if(floor(v.z)==i_volume_size.z-1)return 0.0;
        return g;
    }

    if(floor(v.z)==0) return pattern(vec2(v.x,v.y)) ;
    if(floor(v.z)==i_volume_size.z-1)return pattern(vec2(v.x,v.y)) ;
    float r = floor(random(vec2(v.z,0)) * 2);
    if(floor(v.y)<2-r) return 0.0;
    if(floor(v.y)> i_volume_size.y - 2 + r)return 0.0;
    
    r = floor(random(vec2(v.z,0)) * 2) + 2;
    if(floor(v.x) > i_volume_size.x-r)return 0.0;
    float b = i_args[2]; 
    
    if(mod(floor(v.z),2)==0){
        b= i_args[3];
    }
    return b;
}