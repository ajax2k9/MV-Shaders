// xs_begin
// author : 'Alex M'
// xs_end

//===== user args =====
// uniform float	i_args[8];

//===== built-in args =====
// uniform vec3		i_volume_size;	// volume size [1-256]
// uniform float	i_color_index;	// color index [0-255]
// uniform vec3		i_mirror;		// mirror mode [0,1]
// uniform vec3		i_axis;			// axis mode [0,1]
// uniform float	i_iter;			// iteration index

//===== built-in functions ===== 
// float voxel( vec3 v );			// get voxel color index at position v

float chevron(vec3 v){
if(v.x < i_volume_size.x / 2.0 ) {
		return v.x;
	} else {
		return -v.x + i_volume_size.x;
	}
}

float map( vec3 v ) {				// generate a new voxel color index at position v ( v is at the center of voxel, such as vec3( 1.5, 2.5, 4.5 ) )
    float bump = 0.0;
	float color = i_color_index;
	vec3 floor_v = floor(v); 
	
	float max_z = chevron(v);
	if(mod(floor_v.y,3.0) == 0){
		bump =1.0;
		color+= 1.0;
	}
	if(floor_v.y == 0 || floor_v.y == i_volume_size.y - 1 ){
		
		if(v.z <= max_z + bump && v.z >= max_z - 3.0 + bump) return color;
		return 0.0;

	} else {
		if(v.z <= max_z + bump) return color;
		return 0.0;		
	}
}
